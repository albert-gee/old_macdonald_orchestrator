#include "thread_events.h"
#include "esp_log.h"
#include <esp_openthread_netif_glue.h>

static char* TAG = "THREAD_EVENT_HANDLER";

/**
 * @brief OpenThread event handler.
 *
 * This function handles events generated by the OpenThread stack.
 */
void thread_event_handler(void *arg, const esp_event_base_t event_base, const int32_t event_id, void *event_data)
{
    if (event_base == OPENTHREAD_EVENT)
    {
        switch (event_id)
        {
            case OPENTHREAD_EVENT_START:
                ESP_LOGI(TAG, "OpenThread stack started");
                break;

            case OPENTHREAD_EVENT_STOP:
                ESP_LOGI(TAG, "OpenThread stack stopped");
                break;

            case OPENTHREAD_EVENT_DETACHED:
                ESP_LOGI(TAG, "Thread network detached");
                break;

            case OPENTHREAD_EVENT_ATTACHED:
                ESP_LOGI(TAG, "Thread network attached");
                break;

            case OPENTHREAD_EVENT_SET_DNS_SERVER:
                ESP_LOGI(TAG, "DNS server configured for Thread network");
                break;

            case OPENTHREAD_EVENT_ROLE_CHANGED:
                ESP_LOGI(TAG, "Thread role changed");
                break;

            case OPENTHREAD_EVENT_IF_UP:
                ESP_LOGI(TAG, "Thread network interface up");
                break;

            case OPENTHREAD_EVENT_IF_DOWN:
                ESP_LOGI(TAG, "Thread network interface down");
                break;

            case OPENTHREAD_EVENT_GOT_IP6:
                ESP_LOGI(TAG, "Thread stack added IPv6 address");
                break;

            case OPENTHREAD_EVENT_LOST_IP6:
                ESP_LOGI(TAG, "Thread stack removed IPv6 address");
                break;

            case OPENTHREAD_EVENT_MULTICAST_GROUP_JOIN:
                ESP_LOGI(TAG, "Joined IPv6 multicast group");
                break;

            case OPENTHREAD_EVENT_MULTICAST_GROUP_LEAVE:
                ESP_LOGI(TAG, "Left IPv6 multicast group");
                break;

            case OPENTHREAD_EVENT_TREL_ADD_IP6:
                ESP_LOGI(TAG, "Added TREL IPv6 address");
                break;

            case OPENTHREAD_EVENT_TREL_REMOVE_IP6:
                ESP_LOGI(TAG, "Removed TREL IPv6 address");
                break;

            case OPENTHREAD_EVENT_TREL_MULTICAST_GROUP_JOIN:
                ESP_LOGI(TAG, "Joined TREL IPv6 multicast group");
                break;

            case OPENTHREAD_EVENT_PUBLISH_MESHCOP_E:
                ESP_LOGI(TAG, "MeshCoP E service published");
                break;

            case OPENTHREAD_EVENT_REMOVE_MESHCOP_E:
                ESP_LOGI(TAG, "MeshCoP E service removed");
                break;

            case OPENTHREAD_EVENT_DATASET_CHANGED:
                ESP_LOGI(TAG, "Thread dataset changed");
                break;

            default:
                ESP_LOGW(TAG, "Unhandled OpenThread event");
                break;
        }
    }
}
